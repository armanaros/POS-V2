import React, { useState, useEffect } from 'react';
import {
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  IconButton,
  Box,
  Tabs,
  Tab,
  Switch,
  FormControlLabel,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Fab,
  Avatar,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Divider,
} from '@mui/material';
import {
  Add,
  Edit,
  Delete,
  Visibility,
  Restaurant,
  Category,
  AttachMoney,
  Schedule,
  ToggleOn,
  ToggleOff,
  Image,
} from '@mui/icons-material';

import Layout from '../components/Layout';
import { MenuService } from '../services/firebaseServices';
import { useAuth } from '../context/AuthContext';
import { useSocket } from '../contexts/SocketContext';
import toast from 'react-hot-toast';

const Menu = () => {
  const [categories, setCategories] = useState([]);
  const [menuItems, setMenuItems] = useState([]);
  const [fullMenu, setFullMenu] = useState([]);
  const [activeTab, setActiveTab] = useState(0);
  const [openCategoryDialog, setOpenCategoryDialog] = useState(false);
  const [openItemDialog, setOpenItemDialog] = useState(false);
  const [editingCategory, setEditingCategory] = useState(null);
  const [editingItem, setEditingItem] = useState(null);
  const [loading, setLoading] = useState(false);
  const { user, isAdmin, canManageMenu } = useAuth();
  const { menuItems: socketMenuItems, updateLocalMenuItems, notifications } = useSocket();

  // Category form state
  const [categoryForm, setCategoryForm] = useState({
    name: '',
    description: '',
    sortOrder: 0,
    isActive: true,
  });

  // Item form state
  const [itemForm, setItemForm] = useState({
    categoryId: '',
    name: '',
    description: '',
    price: '',
    preparationTime: 15,
    ingredients: '',
    allergens: '',
    calories: '',
    image: '',
    isAvailable: true,
    isActive: true,
    sortOrder: 0,
  });

  useEffect(() => {
    fetchMenuData();
  }, []);

  // Debug: Log categories state
  useEffect(() => {
    console.log('Categories state updated:', categories);
    console.log('Categories details:', categories.map(cat => ({ id: cat.id, name: cat.name, isActive: cat.isActive })));
  }, [categories]);

  // Update menu items from socket data
  useEffect(() => {
    if (socketMenuItems.length > 0) {
      setMenuItems(socketMenuItems);
      updateLocalMenuItems(socketMenuItems);
    }
  }, [socketMenuItems, updateLocalMenuItems]);

  // Show notifications for menu updates
  useEffect(() => {
    notifications.forEach(notification => {
      if (notification.type === 'menu_update') {
        toast(notification.message);
        // Refresh menu data to ensure consistency
        fetchMenuData();
      }
    });
  }, [notifications]);

  const fetchMenuData = async () => {
    try {
      setLoading(true);
      console.log('Fetching menu data...');
      const [categoriesData, fullMenuData] = await Promise.all([
        MenuService.getCategories(),
        MenuService.getFullMenu()
      ]);
      console.log('Categories loaded:', categoriesData);
      console.log('Full menu loaded:', fullMenuData);
      
      // Calculate category statistics from fullMenuData
      const categoriesWithStats = categoriesData.map(category => {
        const categoryItems = fullMenuData.find(menuCat => menuCat.id === category.id)?.items || [];
        const availableItems = categoryItems.filter(item => item.isAvailable); // Only check isAvailable, not isActive
        
        console.log(`Category "${category.name}":`, {
          totalItems: categoryItems.length,
          availableItems: availableItems.length,
          items: categoryItems.map(item => ({ 
            name: item.name, 
            isAvailable: item.isAvailable, 
            isActive: item.isActive,
            categoryId: item.categoryId 
          }))
        });
        
        return {
          ...category,
          itemCount: categoryItems.length,
          availableCount: availableItems.length,
          items: categoryItems // Add items to category for easier access
        };
      });
      
      console.log('Categories with stats:', categoriesWithStats);
      setCategories(categoriesWithStats);
      setFullMenu(fullMenuData);
      
      // Update socket context with fresh data
      const allItems = fullMenuData.flatMap(category => 
        category.items || []
      );
      updateLocalMenuItems(allItems);
    } catch (error) {
      console.error('Error fetching menu data:', error);
      toast.error('Failed to load menu data');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateCategory = async () => {
    try {
      setLoading(true);
      if (editingCategory) {
        await MenuService.updateCategory(editingCategory.id, categoryForm);
        toast.success('Category updated successfully!');
      } else {
        await MenuService.createCategory(categoryForm);
        toast.success('Category created successfully!');
      }
      setOpenCategoryDialog(false);
      resetCategoryForm();
      fetchMenuData();
    } catch (error) {
      console.error('Error saving category:', error);
      toast.error('Failed to save category');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateItem = async () => {
    try {
      setLoading(true);
      if (editingItem) {
        await MenuService.updateItem(editingItem.id, itemForm);
        toast.success('Item updated successfully!');
      } else {
        await MenuService.createItem(itemForm);
        toast.success('Item created successfully!');
      }
      setOpenItemDialog(false);
      resetItemForm();
      fetchMenuData();
    } catch (error) {
      console.error('Error saving item:', error);
      toast.error('Failed to save item');
    } finally {
      setLoading(false);
    }
  };

  const handleToggleAvailability = async (itemId, isAvailable) => {
    try {
      await MenuService.updateItem(itemId, { isAvailable: !isAvailable });
      toast.success('Item availability updated!');
      fetchMenuData();
    } catch (error) {
      console.error('Error updating availability:', error);
      toast.error('Failed to update availability');
    }
  };

  const handleDeleteCategory = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      try {
        await MenuService.deleteCategory(categoryId);
        toast.success('Category deleted successfully!');
        fetchMenuData();
      } catch (error) {
        console.error('Error deleting category:', error);
        toast.error('Failed to delete category');
      }
    }
  };

  const handleDeleteItem = async (itemId) => {
    if (window.confirm('Are you sure you want to delete this item?')) {
      try {
        await MenuService.deleteItem(itemId);
        toast.success('Item deleted successfully!');
        fetchMenuData();
      } catch (error) {
        console.error('Error deleting item:', error);
        toast.error('Failed to delete item');
      }
    }
  };

  const resetCategoryForm = () => {
    setCategoryForm({
      name: '',
      description: '',
      sortOrder: 0,
      isActive: true,
    });
    setEditingCategory(null);
  };

  const resetItemForm = () => {
    setItemForm({
      categoryId: '',
      name: '',
      description: '',
      price: '',
      preparationTime: 15,
      ingredients: '',
      allergens: '',
      calories: '',
      image: '',
      isAvailable: true,
      isActive: true,
      sortOrder: 0,
    });
    setEditingItem(null);
  };

  const openEditCategory = (category) => {
    setCategoryForm({
      name: category.name,
      description: category.description || '',
      sortOrder: category.sortOrder || 0,
      isActive: category.isActive,
    });
    setEditingCategory(category);
    setOpenCategoryDialog(true);
  };

  const handleAddItem = () => {
    (async () => {
      try {
        // Always fetch categories from Firebase before opening dialog
        const categoriesData = await MenuService.getCategories();
        setCategories(categoriesData);
        if (categoriesData.length === 0) {
          alert('Please create at least one category before adding items.');
          return;
        }
        // Reset form for new item
        setItemForm({
          categoryId: '',
          name: '',
          description: '',
          price: '',
          preparationTime: 15,
          ingredients: '',
          allergens: '',
          calories: '',
          image: '',
          isAvailable: true,
          isActive: true,
          sortOrder: 0,
        });
        setEditingItem(null);
        setOpenItemDialog(true);
      } catch (error) {
        alert('Failed to load categories from database.');
      }
    })();
  };

  const openEditItem = (item) => {
    setItemForm({
      categoryId: item.categoryId,
      name: item.name,
      description: item.description || '',
      price: item.price.toString(),
      preparationTime: item.preparationTime || 15,
      ingredients: item.ingredients || '',
      allergens: item.allergens || '',
      calories: item.calories || '',
      image: item.image || '',
      isAvailable: item.isAvailable,
      isActive: item.isActive,
      sortOrder: item.sortOrder || 0,
    });
    setEditingItem(item);
    setOpenItemDialog(true);
  };

  return (
    <Layout>
      {/* Header Section */}
      <Box sx={{ 
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        borderRadius: 3,
        p: 4,
        mb: 4,
        color: 'white',
        position: 'relative',
        overflow: 'hidden'
      }}>
        <Box sx={{
          position: 'absolute',
          top: -50,
          right: -50,
          width: 100,
          height: 100,
          borderRadius: '50%',
          backgroundColor: 'rgba(255, 255, 255, 0.1)',
        }} />
        <Box sx={{
          position: 'absolute',
          bottom: -30,
          left: -30,
          width: 80,
          height: 80,
          borderRadius: '50%',
          backgroundColor: 'rgba(255, 255, 255, 0.05)',
        }} />
        
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', position: 'relative', zIndex: 1 }}>
          <Box>
            <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 1 }}>
              Menu Management
            </Typography>
            <Typography variant="body1" sx={{ opacity: 0.9 }}>
              Manage your restaurant's menu categories and items
            </Typography>
          </Box>
          {canManageMenu() && (
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Button
                variant="contained"
                startIcon={<Category />}
                onClick={() => setOpenCategoryDialog(true)}
                sx={{ 
                  bgcolor: 'rgba(255, 255, 255, 0.2)',
                  backdropFilter: 'blur(10px)',
                  border: '1px solid rgba(255, 255, 255, 0.3)',
                  '&:hover': {
                    bgcolor: 'rgba(255, 255, 255, 0.3)',
                  }
                }}
              >
                Add Category
              </Button>
              <Button
                variant="contained"
                startIcon={<Add />}
                onClick={handleAddItem}
                sx={{ 
                  bgcolor: 'white',
                  color: '#667eea',
                  fontWeight: 'bold',
                  '&:hover': {
                    bgcolor: 'rgba(255, 255, 255, 0.9)',
                    transform: 'translateY(-2px)',
                    boxShadow: '0 8px 25px rgba(0, 0, 0, 0.15)',
                  },
                  transition: 'all 0.3s ease'
                }}
              >
                Add Item
              </Button>
            </Box>
          )}
        </Box>
      </Box>

      {/* Modern Tabs */}
      <Box sx={{ 
        mb: 4,
        bgcolor: 'white',
        borderRadius: 2,
        p: 1,
        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',
        border: '1px solid #e0e0e0'
      }}>
        <Tabs 
          value={activeTab} 
          onChange={(e, newValue) => setActiveTab(newValue)}
          sx={{
            '& .MuiTab-root': {
              textTransform: 'none',
              fontWeight: 'bold',
              fontSize: '1rem',
              minHeight: 'auto',
              py: 2,
              px: 3,
              borderRadius: 1.5,
              mx: 0.5,
              transition: 'all 0.3s ease',
              '&:hover': {
                bgcolor: 'rgba(102, 126, 234, 0.1)',
              }
            },
            '& .Mui-selected': {
              bgcolor: '#667eea',
              color: 'white !important',
              '&:hover': {
                bgcolor: '#667eea',
              }
            },
            '& .MuiTabs-indicator': {
              display: 'none'
            }
          }}
        >
          <Tab label="📂 Menu Categories" />
          <Tab label="🍽️ Full Menu" />
        </Tabs>
      </Box>

      {/* Categories Tab */}
      {activeTab === 0 && (
        <Box>
          {categories.length === 0 ? (
            <Card sx={{ 
              textAlign: 'center', 
              py: 8,
              background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
              border: '2px dashed #e0e0e0'
            }}>
              <CardContent>
                <Restaurant sx={{ fontSize: 80, color: '#bdbdbd', mb: 2 }} />
                <Typography variant="h6" color="textSecondary" gutterBottom>
                  No categories found
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
                  Create your first menu category to get started
                </Typography>
                {canManageMenu() && (
                  <Button
                    variant="contained"
                    startIcon={<Category />}
                    onClick={() => setOpenCategoryDialog(true)}
                    sx={{ borderRadius: 3 }}
                  >
                    Create Category
                  </Button>
                )}
              </CardContent>
            </Card>
          ) : (
            <Grid container columnSpacing={3} rowSpacing={3}>
              {categories.map((category) => (
                <Grid key={category.id}>
                  <Card sx={{ 
                    height: '100%',
                    borderRadius: 4,
                    border: 'none',
                    background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
                    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',
                    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                    position: 'relative',
                    overflow: 'hidden',
                    '&:hover': {
                      transform: 'translateY(-8px)',
                      boxShadow: '0 20px 60px rgba(102, 126, 234, 0.15)',
                    },
                    '&::before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: '4px',
                      background: 'linear-gradient(90deg, #667eea 0%, #764ba2 100%)',
                    }
                  }}>
                    <CardContent sx={{ p: 3 }}>
                      {/* Category Header */}
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Avatar sx={{ 
                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', 
                            mr: 2,
                            width: 56,
                            height: 56,
                            boxShadow: '0 8px 25px rgba(102, 126, 234, 0.3)',
                          }}>
                            <Restaurant sx={{ fontSize: 28, color: 'white' }} />
                          </Avatar>
                          <Box>
                            <Typography variant="h5" sx={{ 
                              fontWeight: 'bold', 
                              color: '#1a202c',
                              mb: 0.5,
                              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                              WebkitBackgroundClip: 'text',
                              WebkitTextFillColor: 'transparent',
                              backgroundClip: 'text'
                            }}>
                              {category.name}
                            </Typography>
                            <Typography variant="body2" sx={{ color: '#64748b', fontWeight: 500, mb: 1 }}>
                              {category.availableCount || 0} of {category.itemCount || 0} items available
                            </Typography>
                            <Chip
                              label={category.isActive ? 'Active' : 'Inactive'}
                              size="small"
                              color={category.isActive ? 'success' : 'default'}
                              sx={{ 
                                fontWeight: 600,
                                fontSize: '0.75rem'
                              }}
                            />
                          </Box>
                        </Box>
                        {canManageMenu() && (
                          <Box>
                            <IconButton 
                              onClick={() => openEditCategory(category)}
                              size="small"
                              sx={{ 
                                bgcolor: 'rgba(102, 126, 234, 0.1)',
                                '&:hover': { bgcolor: 'rgba(102, 126, 234, 0.2)' }
                              }}
                            >
                              <Edit sx={{ color: '#667eea' }} />
                            </IconButton>
                            <IconButton 
                              onClick={() => handleDeleteCategory(category.id)}
                              size="small"
                              sx={{ 
                                ml: 1,
                                bgcolor: 'rgba(239, 68, 68, 0.1)',
                                '&:hover': { bgcolor: 'rgba(239, 68, 68, 0.2)' }
                              }}
                            >
                              <Delete sx={{ color: '#ef4444' }} />
                            </IconButton>
                          </Box>
                        )}
                      </Box>

                      {/* Category Description */}
                      <Typography variant="body2" color="textSecondary" sx={{ mb: 3, lineHeight: 1.6 }}>
                        {category.description || 'No description provided'}
                      </Typography>

                      {/* Category Stats */}
                      <Box sx={{ 
                        background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)', 
                        borderRadius: 3, 
                        p: 3,
                        border: '1px solid rgba(102, 126, 234, 0.1)',
                        position: 'relative',
                        overflow: 'hidden',
                        '&::before': {
                          content: '""',
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          width: '100%',
                          height: '2px',
                          background: 'linear-gradient(90deg, #667eea 0%, #764ba2 100%)',
                        }
                      }}>
                        <Typography variant="subtitle2" sx={{ 
                          fontWeight: 'bold', 
                          mb: 2, 
                          color: '#374151',
                          fontSize: '0.875rem'
                        }}>
                          📊 Category Statistics
                        </Typography>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                          <Box sx={{ textAlign: 'center' }}>
                            <Typography variant="h4" sx={{ 
                              fontWeight: 'bold', 
                              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                              WebkitBackgroundClip: 'text',
                              WebkitTextFillColor: 'transparent',
                              backgroundClip: 'text'
                            }}>
                              {category.itemCount || 0}
                            </Typography>
                            <Typography variant="caption" sx={{ color: '#6b7280', fontWeight: 600 }}>
                              Total Items
                            </Typography>
                          </Box>
                          <Box sx={{ textAlign: 'center' }}>
                            <Chip 
                              label={`Priority: ${category.sortOrder || 0}`}
                              size="small"
                              variant="outlined"
                              sx={{ 
                                fontSize: '0.75rem',
                                fontWeight: 600,
                                borderColor: '#667eea',
                                color: '#667eea'
                              }}
                            />
                          </Box>
                        </Box>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: 2 }}>
                          <Box sx={{ 
                            flex: 1, 
                            textAlign: 'center',
                            p: 1.5,
                            bgcolor: 'rgba(16, 185, 129, 0.1)',
                            borderRadius: 2,
                            border: '1px solid rgba(16, 185, 129, 0.2)'
                          }}>
                            <Typography variant="subtitle2" sx={{ color: '#059669', fontWeight: 'bold' }}>
                              {category.availableCount || 0}
                            </Typography>
                            <Typography variant="caption" sx={{ color: '#059669', fontSize: '0.7rem' }}>
                              Available
                            </Typography>
                          </Box>
                          <Box sx={{ 
                            flex: 1, 
                            textAlign: 'center',
                            p: 1.5,
                            bgcolor: 'rgba(239, 68, 68, 0.1)',
                            borderRadius: 2,
                            border: '1px solid rgba(239, 68, 68, 0.2)'
                          }}>
                            <Typography variant="subtitle2" sx={{ color: '#dc2626', fontWeight: 'bold' }}>
                              {(category.itemCount || 0) - (category.availableCount || 0)}
                            </Typography>
                            <Typography variant="caption" sx={{ color: '#dc2626', fontSize: '0.7rem' }}>
                              Unavailable
                            </Typography>
                          </Box>
                        </Box>
                      </Box>

                      {/* Quick Actions */}
                      {canManageMenu() && (
                        <Box sx={{ mt: 3, display: 'flex', gap: 1.5 }}>
                          <Button
                            size="medium"
                            variant="contained"
                            startIcon={<Add />}
                            onClick={() => {
                              handleAddItem();
                              setItemForm(prev => ({ ...prev, categoryId: category.id }));
                            }}
                            sx={{ 
                              flex: 1,
                              borderRadius: 3,
                              textTransform: 'none',
                              fontWeight: 600,
                              py: 1.5,
                              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                              boxShadow: '0 4px 15px rgba(102, 126, 234, 0.3)',
                              '&:hover': {
                                background: 'linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%)',
                                transform: 'translateY(-2px)',
                                boxShadow: '0 8px 25px rgba(102, 126, 234, 0.4)',
                              },
                              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
                            }}
                          >
                            Add Item
                          </Button>
                          <Button
                            size="medium"
                            variant="outlined"
                            startIcon={<Visibility />}
                            onClick={() => setActiveTab(1)}
                            sx={{ 
                              borderRadius: 3,
                              textTransform: 'none',
                              fontWeight: 600,
                              py: 1.5,
                              px: 3,
                              borderColor: '#667eea',
                              color: '#667eea',
                              '&:hover': {
                                borderColor: '#5a67d8',
                                bgcolor: 'rgba(102, 126, 234, 0.05)',
                                transform: 'translateY(-2px)',
                              },
                              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
                            }}
                          >
                            View
                          </Button>
                        </Box>
                      )}
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          )}
        </Box>
      )}

      {/* Full Menu Tab */}
      {activeTab === 1 && (
        <Box>
          {fullMenu.length === 0 ? (
            <Card sx={{ 
              textAlign: 'center', 
              py: 8,
              background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
              border: '2px dashed #e0e0e0'
            }}>
              <CardContent>
                <Restaurant sx={{ fontSize: 80, color: '#bdbdbd', mb: 2 }} />
                <Typography variant="h6" color="textSecondary" gutterBottom>
                  No menu items found
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
                  Add categories and items to build your menu
                </Typography>
                {canManageMenu() && (
                  <Button
                    variant="contained"
                    startIcon={<Add />}
                    onClick={handleAddItem}
                    sx={{ borderRadius: 3 }}
                  >
                    Add First Item
                  </Button>
                )}
              </CardContent>
            </Card>
          ) : (
            <Grid container columnSpacing={3} rowSpacing={3}>
              {fullMenu.map((category) => (
                <Grid key={category.id}>
                  <Card sx={{ 
                    borderRadius: 3,
                    border: '1px solid #e0e0e0',
                    overflow: 'hidden'
                  }}>
                    {/* Category Header */}
                    <Box sx={{ 
                      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                      color: 'white',
                      p: 3
                    }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Avatar sx={{ bgcolor: 'rgba(255, 255, 255, 0.2)', mr: 2 }}>
                            <Restaurant />
                          </Avatar>
                          <Box>
                            <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
                              {category.name}
                            </Typography>
                            <Typography variant="body2" sx={{ opacity: 0.9 }}>
                              {category.description || 'No description provided'}
                            </Typography>
                          </Box>
                        </Box>
                        <Chip 
                          label={`${category.items.length} items`}
                          sx={{ 
                            bgcolor: 'rgba(255, 255, 255, 0.2)',
                            color: 'white',
                            fontWeight: 'bold'
                          }}
                        />
                      </Box>
                    </Box>

                    <CardContent sx={{ p: 0 }}>
                      {category.items.length === 0 ? (
                        <Box sx={{ textAlign: 'center', py: 6 }}>
                          <Restaurant sx={{ fontSize: 48, color: '#e0e0e0', mb: 2 }} />
                          <Typography variant="h6" color="textSecondary" gutterBottom>
                            No items in this category
                          </Typography>
                          {canManageMenu() && (
                            <Button
                              variant="outlined"
                              startIcon={<Add />}
                              onClick={() => {
                                handleAddItem();
                                setItemForm(prev => ({ ...prev, categoryId: category.id }));
                              }}
                              sx={{ mt: 2, borderRadius: 2 }}
                            >
                              Add Item
                            </Button>
                          )}
                        </Box>
                      ) : (
                        <Grid container>
                          {category.items.map((item, index) => (
                            <Grid key={item.id}>
                              <Card sx={{ 
                                m: 1,
                                borderRadius: 4,
                                border: 'none',
                                background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
                                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',
                                transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                                position: 'relative',
                                overflow: 'hidden',
                                '&:hover': {
                                  transform: 'translateY(-8px)',
                                  boxShadow: '0 20px 60px rgba(102, 126, 234, 0.15)',
                                },
                                '&::before': {
                                  content: '""',
                                  position: 'absolute',
                                  top: 0,
                                  left: 0,
                                  width: '100%',
                                  height: '4px',
                                  background: item.isAvailable 
                                    ? 'linear-gradient(90deg, #10b981 0%, #059669 100%)'
                                    : 'linear-gradient(90deg, #ef4444 0%, #dc2626 100%)',
                                }
                              }}>
                                <CardContent sx={{ p: 3 }}>
                                {/* Item Image/Avatar */}
                                <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 3 }}>
                                  {item.image ? (
                                    <Avatar
                                      src={item.image}
                                      sx={{ 
                                        width: 60, 
                                        height: 60, 
                                        mr: 2,
                                        border: '3px solid rgba(102, 126, 234, 0.1)',
                                        boxShadow: '0 4px 15px rgba(0, 0, 0, 0.1)'
                                      }}
                                    />
                                  ) : (
                                    <Avatar sx={{ 
                                      width: 60, 
                                      height: 60, 
                                      mr: 2, 
                                      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                                      border: '3px solid rgba(102, 126, 234, 0.1)',
                                      boxShadow: '0 4px 15px rgba(102, 126, 234, 0.3)'
                                    }}>
                                      <Restaurant sx={{ fontSize: 28, color: 'white' }} />
                                    </Avatar>
                                  )}
                                  <Box sx={{ flex: 1 }}>
                                    <Typography variant="h6" sx={{ 
                                      fontWeight: 'bold', 
                                      mb: 1,
                                      color: '#1a202c',
                                      lineHeight: 1.3
                                    }}>
                                      {item.name}
                                    </Typography>
                                    <Typography variant="body2" sx={{ 
                                      color: '#64748b',
                                      display: '-webkit-box',
                                      WebkitLineClamp: 2,
                                      WebkitBoxOrient: 'vertical',
                                      overflow: 'hidden',
                                      lineHeight: 1.5,
                                      fontWeight: 500
                                    }}>
                                      {item.description || 'No description available'}
                                    </Typography>
                                  </Box>
                                </Box>

                                {/* Price and Status */}
                                <Box sx={{ 
                                  display: 'flex', 
                                  justifyContent: 'space-between', 
                                  alignItems: 'center', 
                                  mb: 3,
                                  p: 2,
                                  bgcolor: 'rgba(102, 126, 234, 0.05)',
                                  borderRadius: 2,
                                  border: '1px solid rgba(102, 126, 234, 0.1)'
                                }}>
                                  <Typography variant="h5" sx={{ 
                                    color: '#10b981', 
                                    fontWeight: 'bold',
                                    fontSize: '1.5rem'
                                  }}>
                                    ₱{parseFloat(item.price).toLocaleString('en-PH', { minimumFractionDigits: 2 })}
                                  </Typography>
                                  <Chip
                                    label={item.isAvailable ? '✅ Available' : '❌ Unavailable'}
                                    size="medium"
                                    color={item.isAvailable ? 'success' : 'error'}
                                    variant="filled"
                                    sx={{ 
                                      fontWeight: 600,
                                      px: 2,
                                      borderRadius: 2
                                    }}
                                  />
                                </Box>

                                {/* Additional Info */}
                                <Box sx={{ display: 'flex', gap: 1, mb: 3, flexWrap: 'wrap' }}>
                                  {item.preparationTime && (
                                    <Chip
                                      icon={<Schedule sx={{ fontSize: '16px !important' }} />}
                                      label={`${item.preparationTime} min`}
                                      size="small"
                                      variant="outlined"
                                      sx={{ 
                                        fontSize: '0.75rem',
                                        fontWeight: 600,
                                        borderColor: '#667eea',
                                        color: '#667eea',
                                        '& .MuiChip-icon': { color: '#667eea' }
                                      }}
                                    />
                                  )}
                                  {item.calories && (
                                    <Chip
                                      label={`🔥 ${item.calories} cal`}
                                      size="small"
                                      variant="outlined"
                                      sx={{ 
                                        fontSize: '0.75rem',
                                        fontWeight: 600,
                                        borderColor: '#f59e0b',
                                        color: '#f59e0b'
                                      }}
                                    />
                                  )}
                                </Box>

                                {/* Allergens */}
                                {item.allergens && (
                                  <Box sx={{ mb: 3 }}>
                                    <Typography variant="caption" sx={{ 
                                      display: 'block',
                                      p: 2,
                                      bgcolor: '#fef3c7',
                                      borderRadius: 2,
                                      fontSize: '0.75rem',
                                      fontWeight: 600,
                                      color: '#92400e',
                                      border: '1px solid #fbbf24'
                                    }}>
                                      ⚠️ Allergens: {item.allergens}
                                    </Typography>
                                  </Box>
                                )}

                                {/* Actions */}
                                {canManageMenu() && (
                                  <Box sx={{ display: 'flex', gap: 1.5, pt: 2, borderTop: '1px solid rgba(102, 126, 234, 0.1)' }}>
                                    <IconButton 
                                      onClick={() => openEditItem(item)}
                                      size="medium"
                                      sx={{ 
                                        bgcolor: 'rgba(102, 126, 234, 0.1)',
                                        borderRadius: 2,
                                        px: 2,
                                        py: 1,
                                        '&:hover': { 
                                          bgcolor: 'rgba(102, 126, 234, 0.2)',
                                          transform: 'translateY(-2px)',
                                          boxShadow: '0 4px 15px rgba(102, 126, 234, 0.3)'
                                        },
                                        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
                                      }}
                                    >
                                      <Edit sx={{ fontSize: 18, color: '#667eea', mr: 0.5 }} />
                                      <Typography variant="caption" sx={{ color: '#667eea', fontWeight: 600 }}>
                                        Edit
                                      </Typography>
                                    </IconButton>
                                    <IconButton 
                                      onClick={() => handleToggleAvailability(item.id, item.isAvailable)}
                                      size="medium"
                                      sx={{ 
                                        bgcolor: item.isAvailable ? 'rgba(239, 68, 68, 0.1)' : 'rgba(34, 197, 94, 0.1)',
                                        borderRadius: 2,
                                        px: 2,
                                        py: 1,
                                        '&:hover': { 
                                          bgcolor: item.isAvailable ? 'rgba(239, 68, 68, 0.2)' : 'rgba(34, 197, 94, 0.2)',
                                          transform: 'translateY(-2px)',
                                        },
                                        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
                                      }}
                                    >
                                      {item.isAvailable ? 
                                        <ToggleOff sx={{ fontSize: 18, color: '#ef4444', mr: 0.5 }} /> : 
                                        <ToggleOn sx={{ fontSize: 18, color: '#22c55e', mr: 0.5 }} />
                                      }
                                      <Typography variant="caption" sx={{ 
                                        color: item.isAvailable ? '#ef4444' : '#22c55e', 
                                        fontWeight: 600 
                                      }}>
                                        {item.isAvailable ? 'Hide' : 'Show'}
                                      </Typography>
                                    </IconButton>
                                    <IconButton 
                                      onClick={() => handleDeleteItem(item.id)}
                                      size="medium"
                                      sx={{ 
                                        bgcolor: 'rgba(239, 68, 68, 0.1)',
                                        borderRadius: 2,
                                        px: 1.5,
                                        py: 1,
                                        '&:hover': { 
                                          bgcolor: 'rgba(239, 68, 68, 0.2)',
                                          transform: 'translateY(-2px)',
                                          boxShadow: '0 4px 15px rgba(239, 68, 68, 0.3)'
                                        },
                                        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
                                      }}
                                    >
                                      <Delete sx={{ fontSize: 18, color: '#ef4444' }} />
                                    </IconButton>
                                  </Box>
                                )}
                                </CardContent>
                              </Card>
                            </Grid>
                          ))}
                        </Grid>
                      )}
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          )}
        </Box>
      )}

      {/* Add Category Dialog */}
      <Dialog
        open={openCategoryDialog}
        onClose={() => setOpenCategoryDialog(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 3
          }
        }}
      >
        <DialogTitle sx={{ 
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          display: 'flex',
          alignItems: 'center',
          gap: 2
        }}>
          <Category sx={{ fontSize: 28 }} />
          <Box>
            <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
              {editingCategory ? 'Edit Category' : 'Add New Category'}
            </Typography>
            <Typography variant="body2" sx={{ opacity: 0.9 }}>
              {editingCategory ? 'Update category information' : 'Create a new menu category'}
            </Typography>
          </Box>
        </DialogTitle>
        
        <DialogContent sx={{ p: 4 }}>
          <Box sx={{ 
            bgcolor: '#f8fafc', 
            borderRadius: 2, 
            p: 3,
            border: '1px solid #e2e8f0'
          }}>
            <TextField
              fullWidth
              label="Category Name *"
              value={categoryForm.name}
              onChange={(e) => setCategoryForm({ ...categoryForm, name: e.target.value })}
              required
              sx={{ mb: 3 }}
              InputProps={{
                startAdornment: <Category sx={{ mr: 1, color: '#94a3b8' }} />
              }}
            />
            
            <TextField
              fullWidth
              label="Description"
              value={categoryForm.description}
              onChange={(e) => setCategoryForm({ ...categoryForm, description: e.target.value })}
              multiline
              rows={3}
              placeholder="Describe this category..."
              sx={{ mb: 3 }}
            />
            
            <TextField
              fullWidth
              label="Sort Order"
              type="number"
              value={categoryForm.sortOrder}
              onChange={(e) => setCategoryForm({ ...categoryForm, sortOrder: parseInt(e.target.value) || 0 })}
              helperText="Lower numbers appear first"
              sx={{ mb: 3 }}
            />
            
            <Box sx={{ 
              display: 'flex', 
              alignItems: 'center', 
              p: 2, 
              bgcolor: 'white', 
              borderRadius: 2, 
              border: '1px solid #e2e8f0' 
            }}>
              <FormControlLabel
                control={
                  <Switch
                    checked={categoryForm.isActive}
                    onChange={(e) => setCategoryForm({ ...categoryForm, isActive: e.target.checked })}
                    color="success"
                  />
                }
                label="Active Category"
                sx={{ flex: 1 }}
              />
            </Box>
          </Box>
        </DialogContent>
        
        <DialogActions sx={{ p: 3, bgcolor: '#f8fafc', borderTop: '1px solid #e2e8f0' }}>
          <Button 
            onClick={() => setOpenCategoryDialog(false)}
            size="large"
            sx={{ 
              borderRadius: 2,
              textTransform: 'none',
              px: 3
            }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleCreateCategory}
            variant="contained"
            size="large"
            disabled={loading || !categoryForm.name}
            sx={{ 
              borderRadius: 2,
              textTransform: 'none',
              px: 4,
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              '&:hover': {
                background: 'linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%)',
              }
            }}
          >
            {editingCategory ? 'Update Category' : 'Create Category'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Add Item Dialog */}
      <Dialog
        open={openItemDialog}
        onClose={() => setOpenItemDialog(false)}
        maxWidth="lg"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 3,
            maxHeight: '95vh',
            height: 'auto',
            margin: 1
          }
        }}
        scroll="body"
      >
        <DialogTitle sx={{ 
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          display: 'flex',
          alignItems: 'center',
          gap: 2
        }}>
          <Restaurant sx={{ fontSize: 28 }} />
          <Box>
            <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
              {editingItem ? 'Edit Menu Item' : 'Add New Menu Item'}
            </Typography>
            <Typography variant="body2" sx={{ opacity: 0.9 }}>
              {editingItem ? 'Update the details of your menu item' : 'Create a new delicious menu item'}
            </Typography>
          </Box>
        </DialogTitle>
        
        <DialogContent sx={{ p: 3, maxHeight: '70vh', overflowY: 'auto' }}>
          <Box sx={{ border: '2px solid red', background: '#fffbe6', p: 2, mb: 2 }}>
            <FormControl fullWidth>
              <InputLabel>Category *</InputLabel>
              <Select
                value={itemForm.categoryId || ''}
                label="Category *"
                onChange={(e) => setItemForm({ ...itemForm, categoryId: e.target.value })}
                displayEmpty
                sx={{ pointerEvents: 'auto', zIndex: 9999 }}
                MenuProps={{
                  PaperProps: {
                    style: {
                      maxHeight: 300,
                      width: 'auto',
                      minWidth: 250,
                      zIndex: 9999
                    },
                  },
                }}
              >
                <MenuItem value="" disabled>
                  <em>Select a category</em>
                </MenuItem>
                {Array.isArray(categories) && categories.length > 0 ? (
                  categories.map((category) => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))
                ) : (
                  <MenuItem disabled>
                    <em>No categories found</em>
                  </MenuItem>
                )}
              </Select>
            </FormControl>
          </Box>
                  
                    <Box>
                      <TextField
                      fullWidth
                      label="Item Name *"
                      value={itemForm.name}
                      onChange={(e) => setItemForm({ ...itemForm, name: e.target.value })}
                      required
                      InputProps={{
                        startAdornment: <Restaurant sx={{ mr: 1, color: '#94a3b8' }} />
                      }}
                    />
                  
                    <TextField
                      fullWidth
                      label="Description"
                      value={itemForm.description}
                      onChange={(e) => setItemForm({ ...itemForm, description: e.target.value })}
                      multiline
                      rows={3}
                      placeholder="Describe your delicious menu item..."
                    />

            {/* Pricing & Time Section */}
            <Grid>
              <Box sx={{ 
                bgcolor: '#f0fdf4', 
                borderRadius: 2, 
                p: 3,
                border: '1px solid #bbf7d0',
                mb: 2
              }}>
                <Typography variant="h6" sx={{ fontWeight: 'bold', color: '#2d3748', mb: 2, display: 'flex', alignItems: 'center' }}>
                  <AttachMoney sx={{ mr: 1, color: '#10b981' }} />
                  Pricing & Preparation
                </Typography>
                
                    <TextField
                      fullWidth
                      label="Price *"
                      type="number"
                      step="0.01"
                      value={itemForm.price}
                      onChange={(e) => setItemForm({ ...itemForm, price: e.target.value })}
                    />
                    <TextField
                      fullWidth
                      label="Ingredients"
                      value={itemForm.ingredients}
                      onChange={(e) => setItemForm({ ...itemForm, ingredients: e.target.value })}
                      placeholder="e.g., Tomato, Lettuce, Cheese..."
                    />
                  </Grid>
                  
                  <Grid>
                    <TextField
                      fullWidth
                      label="Allergens"
                      value={itemForm.allergens}
                      onChange={(e) => setItemForm({ ...itemForm, allergens: e.target.value })}
                      placeholder="e.g., Nuts, Dairy, Gluten..."
                    />
                  </Grid>
                  
                  <Grid>
                    <TextField
                      fullWidth
                      label="Calories"
                      type="number"
                      value={itemForm.calories}
                      onChange={(e) => setItemForm({ ...itemForm, calories: e.target.value })}
                      placeholder="Estimated calories"
                    />
                  </Grid>
                  
                  <Grid>
                    <TextField
                      fullWidth
                      label="Sort Order"
                      type="number"
                      value={itemForm.sortOrder}
                      onChange={(e) => setItemForm({ ...itemForm, sortOrder: parseInt(e.target.value) || 0 })}
                      helperText="Lower numbers appear first"
                    />
                  </Grid>
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="Image URL"
                      value={itemForm.image}
                      onChange={(e) => setItemForm({ ...itemForm, image: e.target.value })}
                      placeholder="https://example.com/image.jpg"
                    />
                  </Grid>
                </Grid>
              </Box>
            </Grid>

            {/* Status & Availability Section */}
            <Grid item xs={12}>
              <Box sx={{ 
                bgcolor: '#f1f5f9', 
                borderRadius: 2, 
                p: 3,
                border: '1px solid #cbd5e1'
              }}>
                <Typography variant="h6" sx={{ fontWeight: 'bold', color: '#2d3748', mb: 2, display: 'flex', alignItems: 'center' }}>
                  <ToggleOn sx={{ mr: 1, color: '#667eea' }} />
                  Status & Availability
                </Typography>
                
                <Grid container spacing={3}>
                  <Grid>
                    <Box sx={{ display: 'flex', alignItems: 'center', p: 2, bgcolor: 'white', borderRadius: 2, border: '1px solid #e2e8f0' }}>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={itemForm.isAvailable}
                            onChange={(e) => setItemForm({ ...itemForm, isAvailable: e.target.checked })}
                            color="success"
                          />
                        }
                        label="Available for orders"
                        sx={{ flex: 1 }}
                      />
                    </Box>
                  </Grid>
                  
                  <Grid>
                    <Box sx={{ display: 'flex', alignItems: 'center', p: 2, bgcolor: 'white', borderRadius: 2, border: '1px solid #e2e8f0' }}>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={itemForm.isActive}
                            onChange={(e) => setItemForm({ ...itemForm, isActive: e.target.checked })}
                            color="primary"
                          />
                        }
                        label="Active in menu"
                        sx={{ flex: 1 }}
                      />
                    </Box>
                  </Grid>
                </Grid>
              </Box>
            </Grid>
          </Grid>
        </DialogContent>
        
        <DialogActions sx={{ p: 3, bgcolor: '#f8fafc', borderTop: '1px solid #e2e8f0' }}>
          <Button 
            onClick={() => setOpenItemDialog(false)}
            size="large"
            sx={{ 
              borderRadius: 2,
              textTransform: 'none',
              px: 3
            }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleCreateItem}
            variant="contained"
            size="large"
            disabled={loading || !itemForm.name || !itemForm.price || !itemForm.categoryId}
            sx={{ 
              borderRadius: 2,
              textTransform: 'none',
              px: 4,
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              '&:hover': {
                background: 'linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%)',
              }
            }}
          >
            {editingItem ? 'Update Item' : 'Create Item'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Modern Floating Action Buttons */}
      {canManageMenu() && (
        <Box>
          <Fab
            color="primary"
            aria-label="add item"
            sx={{ 
              position: 'fixed', 
              bottom: 100, 
              right: 20,
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              boxShadow: '0 8px 32px rgba(102, 126, 234, 0.4)',
              '&:hover': {
                background: 'linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%)',
                transform: 'scale(1.1)',
                boxShadow: '0 12px 40px rgba(102, 126, 234, 0.6)',
              },
              transition: 'all 0.3s ease'
            }}
            onClick={handleAddItem}
          >
            <Add />
          </Fab>
          <Fab
            color="secondary"
            aria-label="add category"
            sx={{ 
              position: 'fixed', 
              bottom: 20, 
              right: 20,
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              boxShadow: '0 8px 32px rgba(245, 87, 108, 0.4)',
              '&:hover': {
                background: 'linear-gradient(135deg, #ec4899 0%, #ef4444 100%)',
                transform: 'scale(1.1)',
                boxShadow: '0 12px 40px rgba(245, 87, 108, 0.6)',
              },
              transition: 'all 0.3s ease'
            }}
            onClick={() => setOpenCategoryDialog(true)}
          >
            <Category />
          </Fab>
        </Box>
      )}
    </Layout>
  );
};

export default Menu;
